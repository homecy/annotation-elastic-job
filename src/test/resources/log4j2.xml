<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/2002/xmlspec/dtd/2.10/xmlspec.dtd">
<!--日志级别以及优先级排序:OFF>FATAL>ERROR>WARN>INFO>DEBUG>TRACE>ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出 -->
<!--monitorInterval:Log4j能够自动检测修改配置文件和重新配置本身,设置间隔秒数 -->
<configuration status="INFO" monitorInterval="30">

	<!--先定义所有的appender -->
	<appenders>
		<!--这个输出控制台的配置 -->
		<console name="CONSOLE" target="SYSTEM_OUT">
			<!--输出日志的格式 -->
			<PatternLayout
				pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} |-%-5level [%thread] %c [%L] -| %msg%n" />
		</console>

		<!-- 这个会打印出所有的debug及以上级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份月份建立的文件夹下面并进行压缩,作为存档 -->
		<RollingFile name="RollingFileInfo"
			fileName="${log4j2.log.path}/logs/${log4j2.file.name}.log"
			filePattern="${log4j2.log.path}/logs/$${date:yyyy-MM}/${log4j2.file.name}-%d{yyyy-MM-dd}-%i.log">
			<!--控制台只输出debug及以上级别的信息（onMatch），其他的直接拒绝(onMismatch) -->
			<ThresholdFilter level="DEBUG" onMatch="ACCEPT"
				onMismatch="DENY" />
			<PatternLayout
				pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} |-%-5level [%thread] %c [%L] -| %msg%n" />
			<Policies>
				<TimeBasedTriggeringPolicy />
				<SizeBasedTriggeringPolicy size="500 MB" />
			</Policies>
		</RollingFile>
		
		<!-- 这个会打印出所有的error及以上级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份月份建立的文件夹下面并进行压缩,作为存档 -->
		<RollingFile name="RollingFileError"
			fileName="${log4j2.log.path}/logs/${log4j2.file.name}-error.log"
			filePattern="${log4j2.log.path}/logs/$${date:yyyy-MM}/${log4j2.file.name}-%d{yyyy-MM-dd}-%i-error.log">
			<!--控制台只输出error及以上级别的信息（onMatch），其他的直接拒绝(onMismatch) -->
			<ThresholdFilter level="ERROR" onMatch="ACCEPT"
				onMismatch="DENY" />
			<PatternLayout
				pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} |-%-5level [%thread] %c [%L] -| %msg%n" />
			<Policies>
				<TimeBasedTriggeringPolicy />
				<SizeBasedTriggeringPolicy size="500 MB" />
			</Policies>
		</RollingFile>
	</appenders>
	
	<!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
	<loggers>
		<!--过滤掉spring的一些无用的DEBUG信息 -->
		<logger name="org.springframework" level="INFO" />
		<logger name="org.apache.zookeeper" level="ERROR" />
		<logger name="org.apache.curator" level="ERROR" />
		<logger name="org.hibernate" level="ERROR" />
		<!-- <Logger name="org.hibernate.SQL" level="DEBUG">
			<appender-ref ref="CONSOLE" />
			<appender-ref ref="RollingFileInfo" />
		</Logger> -->
		<logger name="springfox.documentation" level="OFF" />
		<logger name="org.quartz" level="ERROR"/>
		<logger name="com.dangdang" level="ERROR"/>
		<logger name="com.homecy" level="DEBUG" />
		<root level="all">
			<appender-ref ref="CONSOLE" />
			<appender-ref ref="RollingFileInfo" />
			<appender-ref ref="RollingFileError" />
		</root>
	</loggers>
</configuration>